name: Code Checks

on:
  pull_request:
    branches:
      - "main"
      - "develop"

jobs:
  static-analysis:
    env:
      UV_CACHE_DIR: /tmp/.uv-cache

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Enable caching
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run Ruff
        run: |
          uv run ruff check --select I --fix
          uv run ruff check --fix

      - name: Run Mypy
        run: uv run mypy .

  tests:
    env:
      UV_CACHE_DIR:
        /tmp/.uv-cache

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Enable caching
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run tests
        run: |
          uv run coverage run -m pytest .
          uv run coverage report -m